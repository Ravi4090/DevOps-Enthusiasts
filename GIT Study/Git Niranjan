DEVOPS

WHAT IS continuos development?
improve productivity of developers, faster software development/capability of developer team to develop thr projects

role of developers to understand application design, coding,build(compile and create artifacts like binaries like.exe.jar),create artifacts,unit testing,promote the changes to higher environment to testing(qa/uat/production, there will be a dedicated team),notify the testing team to pick changes from testing.all these activities by developer caused a delay,which was an issue with agile/waterfall . using devops approach brought an automation in these things.in devops the devloper focuses on coding and updating in repository. the remaining things like build ,unit changes and promote changes to higher environment is done.
QA(quality assurance) is funtional/integration/regression testing.
UAT(user acceptance testing) done using production data,by business users.

continuos delivery is to promote from non prod envi to prod envi, requires manual approval.using jenkins , docker,ansible and kubernetes.
INFRASTRUCTURE managemnt like create and configure servers . tools like terraform for provisioning and creating servers,ansible for configuring management
and deployment.
continuos delivery using docker(ALSO CI) and kubernets along with jenkins.JENKING FOR EVEN CI/CD, USED AT EVERY STAGE OF DEVOPS. 
CONTINUOUS DELIVERY REQUIRES MANUAL APPROVAL AND DOWNTIME OF 4-6 NOT DONE IN PEAK HOURS.
GOOGLE/FB USE MATURED LEVEL OF DEVOPS PROCESS TO ACHIEVE CONTINUOUS DEPLOYMENT.
HOW TO ACHIEVE CONTINUOS DEPLOYMENT ---
            Application Architecture
monolithic app arch is tightly coupled, no independent releases.
micro ser based app arch is loosely coupled ,here modules/iterations are microservice, independent releases(developed,build,tested,deployed)
for example, sign up dev1 independtly code,built,test,promote to testing (prod envi)
             sign in dev2
             order dev3
             search dev4

DEVOPS IS all about bringing collaboration between dev and ops teams to achieve conti dev, dep,testing,deli and monitoring.


https://github.com/SA-DevOps-22Feb24/Training_Documents

MAVEN IS A BUILD TOOL TO BUILD JAVA APPLICATIONS
pom.xml is PROJECT OBJECT MODEL which contains the dependencies and plugins required to test and build. Also,define the properties of application artifacts, and will be part of the java app project.

MAVEN GOALS ARE ACTIONS WE PERFORM
CLEAN - CLEAN
COMPILE - COMPILE
TEST - EXECUTE
PACKAGE - PACKAGE
INSTALL
DEPLOY

JRE AND MVN LIBRARIES WILL BE CREATED AUTOMATICALLY. pom.xml COMES UNDER PROJECT IN IDE CONSOLE.



START OF DEVOPS 
MODULE 3 GIT
IMPORTANT NOTES

PUSH PULL FETCH ADD COMMIT ARE MAIN COMMANDS

STAGING AREA AND LOCAL REPO MAINTAINED BY GIT, ONLY ACCESS IS THERE FOR USER.


git init to initializing 
it will craete branch called master and directory called git directory.



ls & ls -files
vim
touch
echo
git status
git log  #to get list of commits & git log --oneline/stat & git log --oneline -2
git show <commit id>
git add
git commit -m "message"
git push

commit id auto generated by system

 git config --global user.email "gowdaniranjan4@gmail.com"
 git config --global user.name "niranjan"

 git config  user.email "gowdaniranjan4@gmail.com"
 git config  user.name "niranjan"\

this config should  be done before initial commit



git add . to add all files
 
git add *.txt to add all txt files
git add *.*


___Command for unstaging___
git rm --cached a1.txt
git rm --cached *.txt    from staging to working directory

git rm -f
a1.txt #permanent deletion cant be founf anywhere.
here -f is forcefully removing the file


NOTE--- git commit will commit all in staging area , if dont want to commit a particular file then just unstage it.


__git reset options are__

git reset<commit_id> <reset_option>

reset options are

git reset --soft
from local to staging and working directory

git reset --mixed #default
from local to working directory

git reset --hard 
for permanent deletion of other ids


__git revert options are__
git revert will create a commit point , so that changes can be tracked.


__git branching techniques__
git branch
git switch -c feature1#to create n switch
git checkout -b feature1
git switch feature 1 #to switch
git branch feature 1 #to create

__git merge__

git merge feature1 (from master branch)

IF BOTH BRANCH HAVE SAME FILE WITH SAME RECORD THERE WILL BE CONFLICT, IF RECORD IS DIFFERENT THERE WONT BE CONFLICT.

it will show the file having error , open it , remove head mid and bottom , delete teh file not necessaery and save it. 


git rebase(best practice) should be done in same branch. used to maintain linear commit history.
if any conflict will be shwon in the same branch and the changes can be made while in same branch and the be merged to the master branch.
git rebase master is the command to be run in current branch (feature1). refer class rec.11/03.....

once changes are merged to master branch the feature branches can be deleted. from master branch
git branch -D feature 1

To rename a branch
first switch to the branch and then 
git branch -M feature2branch



GIT SQUASH is a merge option used to combine the commits
git merge --squash feature 1
when executed it will ask for commit message(manual command) , based on that it will create commit point .
git show <commit id> can be used for more details.

use of squash is>>>>>So developer branch will have 2 commit from feature 1 and 2, and integration branch will have 2 commits from dev 1 and dev2 , and release branch will have 2 commits from integration 1 and 2.. and so on .



GIT STASH
Git Stash used to save uncommited changes to a temporary area.
git stash save
git stash save "---" is command(all files in staging)
git stash apply to bring it back to stagging(latest file will be brought) [INDENT IT WILL BE THERE IS STASH LIST]
git stash apply stash@{1} which is id to bring back parti. file
git stash pop .. bring back and delete from the list.
git stash pop stash@{1}
git stash drop (to remove latest from stash list)
git stash drop stash@{1} which is id to delete parti.file
git stash clear to perma.delete all from stash list

Git cherry-pick
Apply specific commits from one branch to another
git cherrypick <commitid>
to be performed while in target branch


IMPORTANT MAINS
 git clone <remote repo clone url>  ** will clone all branches**
git clone -b main <url>

git remote -v to get list of things attached to your loacl repo.
git remote add/remove origin <link>

**git remote -v after git remote add origin <link>**

after creating , add and commit

git push -u origin localfeature
(add in windows credential manager the git account credentials) (or just enter username and token)

git fetch origin(no info.) and run git status and git pull


pull = fetch + merge 
