JENKINS
(contains important notes and steps)
ITS IS AN OPEN SOURCE BUILD ORECHESTRATION TOOL
USED TO CRAETE END TO END CI/CD PIPELINE
C INTEGRATION
C DEPLOYMENT AND AUTOMATE BUILD
BASED ON MASTER SLAVE ARCHITECTURE
JENKINS PIPELINE SCRIPTS ARE WRITTEN USING GROOVY

>>>>>>>>>>>>>>>>>>>>>JENKINS ARCHITECTURE<<<<<<<<<<<<<<<<<<<<<<<<<


SC > BUILT > TESTING > DEPLOY TO QA >PERFORM QA TESTING > DEPLOY TO UAT >PERFORM UAT TESTING > DEPLOY TO PRODUCTION ENVIRONMENT

JENKINS MASTER >>> ITS IS USED TO CREATE CI/CD PIPELINES PROJECTS,AND SCHEDULE TO RUN IN SLAVE NODES .
JENKINS SLAVE NODE >>> TO RUN ACTUAL JENKINS PIPELINE PROJECT.

JENKINS MASTER TOOLS REQ. ARE GIT,JDK,JENKINS

JENKINS SLAVE NODE TOOLS REQ. ARE BUILD TOOLS - GIT,MAVEN, JDK(PREREQ.)

DIFFERENT SLAVE NODES SHOULD BE CREATED FOR DIFFERENT LANG. LIKE PYTHON(GIT AND PYTHON), .NET(GIT , .NET FRAMEWORK), ANGULAR, NODEJS.

INSTALLATION STEPS>>
INFRASTRUCTURE VM
INSTALL PRE-REQUISITES
INSTALL JENKINS
POST INSTALLATION ACTIVITIES


LAUNCH AWS UBUNTU MACHINE (2VM's)
ENABLE PORT 8080
INSTALL JENKINS
START JENKINS
USING PUBLIC IP:8080
>>LOGIN USING CREDENTIAL IN DIRECTORY SHOWN IN WEB<<


USE CODES IN TRAINING DOCUMENTS AND PERFORM THOSE TO INSTALL JENKINS


CHECK OF USER AND OTHER OPTIONS IN DASHBOARD> MANAGE > SYSTEM

FOR MANAGING PLUGINS >>> DASHBOARD> MANAGE> PLUGINS > INSTALLED PLUGINS TO ENABLE OR DISABLE OR UNINSTALL > AVAILABLE PLUGINGS TO INSTALL(CHECK DOWNLOAD PROGRESS AND SELECT RESTART IS RECOMMENDED) > UPDATES FOR UPDATING

**UPDATING IS ROLE OF DEVOPS IN JENKINS**

FOR DEPLOYING ON LATEST VERSION : ADV SETTINGS > DEPLOY > PASTE URL FROM JENKINGS OFFICIAL PAGE FOR LATEST VERSION AND DEPLOY


-----------------------------USER AND FOR SECURITY-------------------------------
DASHBOARD> MANAGE > SECURITY > IN SECURITY REALM (JENKINS OWN USER DATABASE IS DEFAULT , WE CAN ADD AWS AZURE USERS) > AUTHORIZATION TO ADD/ REMOVE USER -- MATRIX BASED USER

---------------------------PROJECT---------------------------
FREESTYLE , IS COMPLETE MANUAL CONFIGURATION , NOT USED BASICALLY.
PIPELINE PROJECTS, WRIITEN USING GROOVY SCRIPTS TO CRERATE CICD PIPELINE JOBS

----------------------------------------FREESTYLE PROJECTS-----------------------------------------

STEPS===
DASHBOARD > NEW ITEM > FREESTYLE AND GIVE PROJECT NAME > OK
JOBS CONFIGURATION===IN CONFIGURATION
DESCRIPTION > NONE> BUILD STEPS(EXECUTE SHELL COMMAND)(BASIC LINUX COMMAND)> POST BUILD ACTIONS FOR NOTIFICATIONS > APPLY

GO BACK TO DASHBOARD > CLICK JOB NAME > RUN(BUILD NOW) > JOB DASHBOARD FOR MORE DETAILS >> CONSOLE OUTPUT FOR RESULTS(WILL SHOW ERRORS)> SAVE / CORRECT IT - APPLY - RUN AND SAVE 

ALSO CHECK BUILD HISTORY, USE WORKSPACE IN OPTIONS FOR SEEING FILES.


TOGGLE WORKSPACE FOLDER IN AWS CONSOLE FOR SAVED RESULTS(SHOWN IN CONSOLE OUTPUT FROM IN BUILD HISTORY) USUALLY COPY PASTE IT




___VARIABLES___
ENVIRONMENT VARIABLES #PRE DEFINED KEYWORDS #THEY HOLD DATA AT RUN TIME LIKE    echo"jenkins-${JOB_NAME}-${BUILD_NUMBER}"
JOB CONFIGURATTION> BUILD STEPS> LIST OF AVAILABLE ENVI VARIABLES

AS A DEVELOPER THEY WANT TO KNOW THE STATUS , AND OTHER INFORMATION SO ENV VARIABLES ARE USED.




USER DEFINED VARIABLES

THIS JOB IS PARAMETERIZED > ADD PARAMETERS > STRING/"""> ENVI (QA/UAT/PROD)

JOB CONFIGURATTION> BUILD STEPS> echo"user defined variables_${envi}" > BUILD WITH PARAMETERS


====================END OF FREESTYLE=====================


-----------------------------PIPELINE PROJECTS AND CICD---------------------------------
ARE RE-USABLE(ONLY SCRIPTS)
TYPES ARE SCRIPTED(GROOVY IS MUST) SO JENKING SIMPLIFIED IT AND DECLARATIVE PIPELINE(BEST PRACTICE) CAME .
SCRIPTED START WITH NODE , DECLARATIVE START WITH PIPELINE


PIPELINE CONSISTS OF STAGES 
STAGES HAVE MANY TASK ENCLOSED IN STEP

REFER GIT REPO NOTES FOR PIPELINE EXAMPLE 

STEPS FOR CREATION
DASHBOARD > CREATE > PIPELINE > CONFIGURATION PIPELINE (Pipeline script)> selct random > save and apply > run> from build history to console output.


TYPES OF AUTHENTICATION :
PASSWORD BASED AUTHENTICATION
PASSWORDLESS FOR KNOWN SERVERS
KEY BASED FOR PROD. LEVEL
TOKEN BASED AUTHENTICATION

>>>>>>>>>>>>>>>>>>>SLAVE NODE CONFIGURATION<<<<<<<<<<<<<<<<<<<<<

REQUIREMENTS GIT MAVEN JDK ON AWS EC2
CREATE USER IN SLAVE NODE AND CREATE SSH KEYS
SSH KEYS IS COMPOSED OF PUBLIC AND PRIVATE KEYS

USE COMMANDS IN GIT REPO

apt is package manager for ubuntu based machines


***keygen >type ,size ,method***
 
SCM AND BUILD TRIGGER IS CONTINUOS INTEGRATION

STEP 1 :  INSTANCE CONFIGURATION USING COMMANDS
STEP 2 : go to git dashboard> nodes > add node-- changes are remote root directory , launchmethod ssh using private ip, add credential using ssh username with private key and copy paste the username and private key from aws ec2 slave node machine and ADD.> host key verification using manual option> at last lefT coloumn manual trust ssh key click yes


dashboard >new job > configure use groovy script >build > see console output.

agent is node name


refer git repo notes and perform the tasks for scm and clean package .

>>>>>>>>>>>>>>>>>>>>>>>>QA TESTING<<<<<<<<<<<<<<<<<<<<<<<<

for qa testing need new server and install tomcat ,jdk refer git repo notes for commands.
STEP 1 : INSTANCE 

STEP 2 : got to git dashboard> modes > add node-- changes are remote root directory, launchmethod ssh using private ip, add credential using ssh username with private key and copy paste the username and private key from aws ec2 slave node machine and ADD.> host key verification using manual option
AFTER CREATING SLAVE NODE > CONFIGURE > MANUAL ACCEPT SSH KEY ....

**make changes in etc file on instance USING COMMAND IS GIT REPO**


STEP 3(PLUGIN INSTALLATION AND CONFIGURATION) : IN JENKINS MASTER INSTALL PUBLISH OVER SSH PLUGIN UNDER AVAILABLE PLUGINS AND RESTART.
GOTO MANAGE JENKINS > SYSTEM > SCROLL DO0WN TILL PUBLISH OVER SSH > ADD SSH SERVER > FILL CONFIGURATION PARAMETERS LIST(username,hostname,key**)(opt/tomcat/webapps is root directory for eg.)> test configuration should be success.

******TOMCAT SHOULD BE STARTED AND CONNECTED TO JENKINS MASTER******



STEP 4 :NOW GO TO SLAVE NODE CONFIGURATION >SNIPPET GENERATOR(SEARCH SSH PUBLISH AND SELECT) HERE IN TRANSFERS SOURCE PATH SHOULD BE ENTERED FROM MAVEN COMPILE PACKAGE OUTPUT, LEAVE REMOTE AS "." >GENERATE SCRIPT.
CONFIGURE PIPELINE AND DEPLOY AND SEE CONSOLE OUTPUT FROM BUILD HISTORY

THIS IS CONTINUOS DEPLOYMENT

***to do UAT after this QA   we need to 3 instances and 3 nodes  for build , qa deployment , uat deployment***


=============================================END OF PIPELINE PROJECTS=====================================================


------ BUILD TRIGGER ----- 

BUILD TRIGGERS > TYPES
BUILD PERIODIC,POLL SCM,WEBHOOK

1)BUILD PERIODIC : TO RUN JOB BASED ON TIME SET.
STEPS ARE PIPELINE>CONFIGURE>SCROLL DOWN TILL BUILD TRIGGER OPTION,enable and set time in build periodic 
crontab.guru reference for setting time for build triggers
USED TO SETUP QA/UAT TEST SCHEDULE.

2)POLL SCM: TO TRIGGER JOB WHENEVER THERE IS CHANGE IN WEBHOOK AND BASED ON SCHEDULE SET(2MINS)(2MINS AFTER CHANGE IN SCM).USED CRONTAB LIKE BUILD PERIODIC.WILL TRIGGER ONLY IF THERE IS A CHANGE IN SCM . 


3)WEBHOOK: TO TRIGGER JOB WHENEVER THERE IS CHANGE IN WEBHOOK.
FOR THIS NEED TO CONFIG GITHUBWEBHOOK URL IN SCR.
IN REPOSITORY SETTINGS >WEBHOOK >ADD URL
URL FORMAT IS jenkinsurl:8080/github-webhook/
url used is public url. This CONTINUOS INTEGRATION.
***PIPELINE SCRIPT CAN ALSO BE MADE FROM GIT REPO, ADDED IN PIPELINE CONFIGURATION***



------- EMAIL -------
manage jenkins > systems > email notifications> smtp.gmail.com>@gmail.com> username is email >password>use ssl>smtp port 465>charset utf-8>again same email in test configuration

OR generate pipeline script(snippet generator>EMAIL OPTION) and enter in post build action(below each step, chnage only head and subject) in pipeline configuration(post,failure,successful,unsatble are jenkins keywords)
CAN ADD APPROVAL STAGES AS WELL IN PIPELINE SCRIPT.



------ HANDLING APP BUILD AND CICD PIPELINES THROUGH ECLIPSE ------

copy repo  url>in eclipse file>import>git>projects from git>existing repo>complete credentials(store in secure store)>branch selection>directory selection>import as general project

** right click on file >team > commit and other commands, commit is mandatory after changes**
OPEN TERMINAL FOR GIT STAGGING AND PERFORM TASKS.THIS WILL AUTO TRIGGER JOBS IF BUILD TRIGGER IS SET.

**So we are connecting git repo to eclipse , any change there will trigger build at Jenkins, so no direct connection between eclipse and jenkins**
